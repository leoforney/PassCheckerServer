buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.jaredsburrows:gradle-license-plugin:0.8.42'
    }
}

plugins {
    id 'com.devsoap.vaadin-flow' version '1.0.0.RC3'
    id 'org.springframework.boot' version '2.1.1.RELEASE'
    id 'war'
}

vaadin.autoconfigure()

group 'tk.leoforney'
version '0.5-ALPHA'

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.jaredsburrows.license'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url "http://www.javaxt.com/maven"}
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    implementation "com.sparkjava:spark-core:2.7.2"
    implementation "org.xerial:sqlite-jdbc:3.21.0"
    implementation "com.google.code.gson:gson:2.8.4"
    implementation "com.vaadin:vaadin-app-layout-flow:1.0.3"
    implementation "commons-codec:commons-codec:1.11"
    implementation "javaxt:javaxt-core:1.9.0"
    implementation "org.mongodb:mongodb-driver-sync:3.10.1"
    compile ('org.vaadin.marcus:shortcut:0.3.0') {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
}

bootWar {
    vaadin.productionMode=true
    vaadin.submitStatistics=false
    from {
        configurations.compile.collect { (it.isDirectory() && it.name != "PassChecker.db") ? it : zipTree(it) }
    }
}

bootJar {
    vaadin.productionMode=false
    vaadin.submitStatistics=false
    System.out.println("BootJar reached")
    manifest {
        attributes ( 'Start-Class': 'tk.leoforney.passcheckerserver.Main',
                'Version': version,
                'Main-Class': 'org.springframework.boot.loader.JarLauncher')
    }
    from {
        configurations.compile.collect {
            System.out.println(it.getAbsoluteFile().toPath().toString())
            (it.isDirectory() && it.name != "PassChecker.db") ? it : zipTree(it)
        }
    }
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

task createProperties {
    doLast {
        System.out.println("$projectDir")
        def propFile = new File("$projectDir/out/production/resources/version.properties")
        propFile.createNewFile()
        propFile.withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p['vaadin'] = vaadin.version
            p['productionMode'] = vaadin.productionMode.toString()
            p['time'] = new Date().format('MM/dd/yyyy - HH:mm:ss')
            p['hash'] = getGitHash()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
    System.out.println("Property file created")
}